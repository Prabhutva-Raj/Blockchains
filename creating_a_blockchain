"""Created on Mon Jun  8 13:07:24 2020"""

# Module 1 :: Creating a Blockchain

# importing the libraries
import datetime
import hashlib
import json
from flask import Flask, jsonify
# object of flask class is the web application iteself
# jsonify : used to return the messages from postman when we interact with our blockchain

# part 1 : Building a blockchain-------------------------------

class Blockchain:
    
    def __init__(self): #variables preceeded by self are the variables of object 
        self.chain = []
        self.create_block(proof=1 , previos_hash='0')   # method called here to create first block (genesis block) of blockchain
        # proof : each block will have its proof (an arbitarty no)
        
    def create_block(self, proof, previous_hash):
        block = {'index': len(self.chain)+1 ,
                 'timestamp': str(datetime.datetime.now()) ,
                 'proof' : proof(),
                 'previous_hash' : previous_hash
                 }
        self.chain.append(block)
        return block
    
    def get_previous_block(self):
        return self.chain[-1]
        
        # we apply create_block function right after mining a block
        # mine_block function would simply get the proof of work that we need to solve, so we have to define problem and algorithm to find this proofOfWork
        # once we get this POW, means block is mined and is ready to be added 
        
    
    # proof of work : POW is the number that miners have to find to mine a new block
    # (hard to find but easy to verify)
    # hard to find : so that it can  have much value (cryptocurency would have been of less value)
    def proof_of_work(self, previous_proof):
        new_proof = 1
        check_proof = False
        while check_proof is False:
            hash_operation = hashlib.sha256(str(new_proof**2 - previous_proof**2).encode()).hexdigest()     # encode() because sha256 want input in format b'5' .
            if hash_operation[:4] == '0000':
                check_proof = True
            else:
                new_proof += 1
        return new_proof
    
    
    
    def hash(self, block):
        encoded_block = json.dumps(block, sort_keys = True).encode()   # sorted by keys
        return hashlib.sha256(encoded_block).hexdigest()
        
    
    
    # check whether each block has correct POW
    # prev hash of each block == prev hash in each block
    #( by these two....blockchains is valid)
    def is_chain_valid(self, chain):
        previous_block = chain[0]
        block_index = 1
        while block_index < len(chain):
            block = chain[block_index]
            if block['previous_hash'] != self.hash(previous_hash):
                return False
            
            previous_proof = previous_block['proof']
            proof = block['proof']
            hash_operation = hashlib.sha256(str(proof**2 - previous_proof**2).encode()).hexdigest()     # encode() because sha256 want input in format b'5' .
            if hash_operation[:4] != '0000':
                return False
            
            previous_block = block
            block_index+=1
        return True
            
    
    
    
    
    
    
            
